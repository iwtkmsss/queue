import React, { useState, useEffect, useContext } from 'react';
import { useError } from '../context/ErrorContext';
import { WebSocketContext } from '../context/WebSocketProvider';

import MainManager from './admin/MainManager';
import QueueManager from './admin/QueueManager';
import QuestionsManager from './admin/QuestionsManager';
import ServiceSettings from './admin/SystemSettings';
import Statistics from './admin/Statistics';

import './Admin.css';

const API_URL = import.meta.env.VITE_API_URL;

const Admin = () => {
  const positions = ['–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä', '–î–∏—Å–ø–µ—Ç—á–µ—Ä', '–ú–µ–Ω–µ–¥–∂–µ—Ä'];
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [token, setToken] = useState(localStorage.getItem('token') || '');
  const [loginData, setLoginData] = useState({ name: '', password: '', expectedPosition: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä' });

  const [employees, setEmployees] = useState([]);
  const [name, setName] = useState('');
  const [position, setPosition] = useState('');
  const [newPassword, setNewPassword] = useState('');

  const [section, setSection] = useState('main');
  const [loading, setLoading] = useState(false);

  const { showError } = useError();

  const socket = useContext(WebSocketContext);

  useEffect(() => {
    if (!socket) return;

    const handleMessage = (event) => {
      const message = JSON.parse(event.data);

      if (message.type === 'update_employees') {
        console.log('üîî –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤');
        fetchEmployees();
      }
    };

    socket.addEventListener('message', handleMessage);
    return () => socket.removeEventListener('message', handleMessage);
  }, [socket]);

  useEffect(() => {
    if (token) {
      setIsAuthenticated(true);
      fetchEmployees();
    }
  }, [token]);

  const handleLogout = () => {
    localStorage.removeItem('token');
    setToken('');
    setIsAuthenticated(false);
  };

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const res = await fetch(`${API_URL}/auth/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(loginData),
      });

      let data = {};
      try {
        data = await res.json();
      } catch (jsonError) {
        console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON:', jsonError);
      }

      if (res.ok) {
        if (data.token) {
          localStorage.setItem('token', data.token);
          setToken(data.token);
          setIsAuthenticated(true);
        } else {
          showError('–°–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ —Ç–æ–∫–µ–Ω');
        }
      } else {
        showError(data.error || `–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–∫–æ–¥: ${res.status})`);
      }
    } catch (err) {
      showError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑ º—î–¥–Ω–∞—Ç–∏—Å—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!name.trim() || !position.trim() || !newPassword.trim()) {
      showError("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è (–Ü–º º—è, –ü–æ—Å–∞–¥–∞, –ü–∞—Ä–æ–ª—å)");
      return;
    }

    try {
      const res = await fetch(`${API_URL}/employees`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ name, position, password: newPassword }),
      });

      if (res.ok) {
        setName('');
        setPosition('');
        setNewPassword('');
        fetchEmployees();
      } else {
        const data = await res.json();
        showError(data.error || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞');
      }
    } catch {
      showError('–°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ');
    }
  };

  const handleReload = async () => {
    setLoading(true);
    try {
      await fetchEmployees();
    } catch (error) {
      showError(error.message || '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö');
    } finally {
      setLoading(false);
    }
  };

  const fetchEmployees = async () => {
    try {
      const res = await fetch(`${API_URL}/employees`);
      const data = await res.json();
      setEmployees(data);
    } catch {
      showError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤');
    }
  };

  const getStatusColorClass = (status) => {
    switch (status) {
      case '–ü—Ä–∞—Ü—é—î': return 'practiong';
      case '–û—á—ñ–∫—É—î': return 'awaiting';
      case '–ù–µ –ø—Ä–∞—Ü—é—î': return 'not-working';
      default: return '';
    }
  };

  if (!isAuthenticated) {
    return (
      <div className="admin-container">
        <h2>–í—Ö—ñ–¥ –≤ –∞–¥–º—ñ–Ω–∫—É</h2>
        <form onSubmit={handleLogin} className="admin-form">
          <input
            type="text"
            placeholder="–Ü–º º—è"
            value={loginData.name}
            onChange={(e) => setLoginData({ ...loginData, name: e.target.value })}
          />
          <input
            type="password"
            placeholder="–ü–∞—Ä–æ–ª—å"
            value={loginData.password}
            onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}
          />
          <button type="submit">–£–≤—ñ–π—Ç–∏</button>
        </form>
      </div>
    );
  }

  return (
    <div className="admin-container">
      <div className="admin-header">
        <div className="admin-nav">
          <button onClick={() => setSection('main')}>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞–º–∏</button>
          <button onClick={() => setSection('queue')}>–ß–µ—Ä–≥–∞</button>
          <button onClick={() => setSection('stats')}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</button>
          <button onClick={() => setSection('settings')}>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</button>
          <button className="logout-btn" onClick={handleLogout}>–í–∏–π—Ç–∏</button>
        </div>
      </div>

      {section === 'main' && (
        <MainManager
          name={name}
          setName={setName}
          position={position}
          setPosition={setPosition}
          newPassword={newPassword}
          setNewPassword={setNewPassword}
          positions={positions}
          handleSubmit={handleSubmit}
          employees={employees}
          handleReload={handleReload}
          loading={loading}
          getStatusColorClass={getStatusColorClass}
        />
      )}
      {section === 'queue' && <QueueManager />}
      {section === 'stats' && <Statistics />}
      {section === 'settings' && (
        <>
          <QuestionsManager />
          <hr style={{ margin: '20px 0' }} />
          <ServiceSettings />
        </>
      )}
    </div>
  );
};

export default Admin;
