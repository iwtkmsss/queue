import React, { useEffect, useState, useContext } from 'react';
import './QueueManager.css';
import { useError } from '../../context/ErrorContext';
import { WebSocketContext } from '../../context/WebSocketProvider';

const API_URL = import.meta.env.VITE_API_URL;
const LIMIT = 50;

const statusClassMap = {
  waiting: 'status-waiting',
  in_progress: 'status-inprogress',
  completed: 'status-completed',
  missed: 'status-missed',
  did_not_appear: 'status-didnotappear'
};

const QueueManager = () => {
  const [queue, setQueue] = useState([]);
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [isLoading, setIsLoading] = useState(false);
  const [windowFrom, setWindowFrom] = useState('');
  const [windowTo, setWindowTo] = useState('');
  const [editingId, setEditingId] = useState(null);
  const [newWindow, setNewWindow] = useState('');
  const { showError } = useError();

  const socket = useContext(WebSocketContext);

  const fetchQueue = async (pageNum = 1) => {
    setIsLoading(true);
    try {
      const offset = (pageNum - 1) * LIMIT;
      const res = await fetch(`${API_URL}/queue?limit=${LIMIT}&offset=${offset}`);
      const data = await res.json();
      setQueue(data.rows);
      setTotalPages(Math.ceil(data.total / LIMIT));
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —á–µ—Ä–≥–∏:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchTotalCount = async () => {
    try {
      const res = await fetch(`${API_URL}/queue/count`);
      const data = await res.json();
      setTotalPages(Math.ceil(data.count / LIMIT));
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ:', err);
    }
  };

  const handleBulkRedirect = async () => {
    if (!windowFrom || !windowTo || isNaN(windowFrom) || isNaN(windowTo)) {
      showError('‚ùó –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –Ω–æ–º–µ—Ä–∏ –≤—ñ–∫–æ–Ω');
      return;
    }

    try {
      const res = await fetch(`${API_URL}/queue/move-window`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          from: parseInt(windowFrom),
          to: parseInt(windowTo)
        })
      });

      const result = await res.json();

      if (res.ok) {
        showError(`‚úÖ –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü—ñ—é –≤–∏–∫–æ–Ω–∞–Ω–æ. –ü–µ—Ä–µ–º—ñ—â–µ–Ω–æ: ${result.moved}`);
        fetchQueue(page);
      } else {
        showError(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${result.error || '–Ω–µ–≤—ñ–¥–æ–º–∞'}`);
      }
    } catch (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ PATCH:', err);
      showError('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É');
    }
  };

  const handleUpdate = async (id) => {
    try {
      const res = await fetch(`${API_URL}/queue/${id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ window_id: newWindow })
      });

      if (res.ok) {
        setEditingId(null);
        fetchQueue(page);
      } else {
        showError('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É');
      }
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ:', err);
    }
  };

  useEffect(() => {
    fetchTotalCount();
  }, []);

  useEffect(() => {
    fetchQueue(page);
  }, [page]);

  useEffect(() => {
  if (!socket) return;

  const handleMessage = (event) => {
    try {
      const msg = JSON.parse(event.data);
      if (msg.type === 'queue_updated') {
        setPage(1);
        fetchQueue(1);
      }
    } catch (err) {
      console.error('‚õîÔ∏è WebSocket error in QueueManager:', err);
    }
  };

    socket.addEventListener('message', handleMessage);
    return () => socket.removeEventListener('message', handleMessage);
  }, [socket]);


  const handlePageChange = (newPage) => {
    setPage(newPage);
  };

  const handleEdit = (id, currentWindow) => {
    setEditingId(id);
    setNewWindow(currentWindow);
  };

  return (
    <div className="queue-manager">
      <div className="queue-bulk-transfer">
        <h3>üîÅ –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü—ñ—è –≤—ñ–∫–æ–Ω</h3>
        <input type="number" placeholder="–ó –≤—ñ–∫–Ω–∞..." value={windowFrom} onChange={(e) => setWindowFrom(e.target.value)} />
        <input type="number" placeholder="–ù–∞ –≤—ñ–∫–Ω–æ..." value={windowTo} onChange={(e) => setWindowTo(e.target.value)} />
        <button onClick={handleBulkRedirect}>üîÅ –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É–≤–∞—Ç–∏</button>
      </div>

      <h2>üìã –ß–µ—Ä–≥–∞</h2>

      <div className="queue-pagination">
        {Array.from({ length: totalPages }, (_, i) => (
          <button key={i} className={i + 1 === page ? 'active' : ''} onClick={() => handlePageChange(i + 1)}>
            {i + 1}
          </button>
        ))}
      </div>

      <table className="queue-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>–î–∞—Ç–∞ —Ç–∞ —á–∞—Å</th>
            <th>–ü–∏—Ç–∞–Ω–Ω—è</th>
            <th>–í—ñ–∫–Ω–æ</th>
            <th>–°—Ç–∞—Ç—É—Å</th>
            <th>–î—ñ—ó</th>
          </tr>
        </thead>
        <tbody>
          {queue.map((item) => {
            const formatted = new Date(item.appointment_time).toLocaleString('uk-UA', {
              day: '2-digit', month: '2-digit', year: 'numeric',
              hour: '2-digit', minute: '2-digit'
            });
            const statusClass = statusClassMap[item.status] || '';

            return (
              <tr key={item.id} className={statusClass}>
                <td>{item.id}</td>
                <td>{formatted}</td>
                <td>{item.question_text}</td>
                <td>
                  {editingId === item.id ? (
                    <input type="number" value={newWindow} onChange={(e) => setNewWindow(e.target.value)} />
                  ) : (
                    item.window_id || '-'
                  )}
                </td>
                <td>{item.status}</td>
                <td>
                  {editingId === item.id ? (
                    <>
                      <button onClick={() => handleUpdate(item.id)}>üíæ –ó–±–µ—Ä–µ–≥—Ç–∏</button>
                      <button onClick={() => setEditingId(null)}>‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏</button>
                    </>
                  ) : (
                    <button onClick={() => handleEdit(item.id, item.window_id)}>‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏</button>
                  )}
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>

      {isLoading && <p style={{ padding: '10px' }}>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>}
    </div>
  );
};

export default QueueManager;
